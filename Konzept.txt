Ansatz der Synthese vieler Beobachtungen:
Ideal ist das komplette Verstehen von Vorgängen, aber bevor das erreicht
wird, kann man nur ein Puzzle von Beobachtungen zu groben Vermutungen
zusammensetzen.
Ein solches Puzzle-Stück wäre wohl eine Einzel-Folgerung aus einer
eigenen Beobachtung oder einem Beobachtungsbericht.
Eine Folgerung besteht aus einer Veränderungsbeschreibung.
Es gibt also ein Vor und Danach einer Veränderung. Die Veränderung
könnte man formal als Abbildung des Zustandsvektors auf sich selbst
definieren.
Aus atomaren Veränderungsbeschreibungen wird so ein Geflecht von
denselben zu einem "Weltverständnis" zusammengesetzt.
Aus dem ständigen Strom von Beobachtungen wird dieses Set an
Beschreibungen mehr schlecht als recht verifiziert, und die Ergebnisse
mit Anderen synchronisiert.
Grobe Fehler in dem individuellen Glaubenssystem sind die Regel.

Frage: Wie liegen die Beobachtungen vor?
Das Format, das verarbeitet wird, könnte eine Sequenz hiervon sein:
<Verb/ Funktion>,Attribut1=Wert1,...,AttributN=WertN<Zeilenende>

Limitierung des Observablen-Ansatzes:
Da wir versuchen, das Universum durch Zustandsveränderungen zu
simulieren, wobei ein Zustand sich aus Ort (oder "Pointer", impliziert
beliebig viele mögliche Intertialsysteme oder Namensraum-Systeme) und
Datum (also quantitative Aussage, impliziert Fehler und prinzipielle
Unschärfe) besteht, und die Veränderung durch funktionelle Abbildung
beschrieben wird, aber insbesondere in einem System mit Evolution die
Observablen ihre Relationen selbständig ändern, muß es sich bei dieser
Simulation immer nur um limitierte Annäherungen handeln, die auch durch
(vielleicht zum größten Teil vermeintliche) Eigeninteressen die Tendenz
besitzt zu korrumpieren, also verfremdende Vereinfachungen zu verwenden,
um die Implementierungsenergie zu senken.
Implementierungsenergie ist evt. identisch mit Streß.

Geschlossen determinierter Ansatz:
Beschrieben wird ein Graph von Relationen zwischen Objekt-Attributen.
Kanten des Graphen sind Abbildungen oder Funktionen, wie in Mathematik
oder klassischer Programmierung.

Die Funktionen sind von der Anzahl wahrscheinlich relativ überschaubar,
vielleicht in der Größenordnung Hundert, wobei wie in Sprachen eine
Relation existiert, in der mit 100 Worten 99% aller Inhalte beschrieben
werden, aber die Anzahl an Worten unbegrenzt ist.

Die Anzahl an Objekten und ihren Attributen ist dagegen sehr groß.

Funktionen besitzen einen eindeutigen internen Namen, der der
C-Variablennamen-Konvention gehorcht. Das Interface, also bei
klassischen Funktionen die Argumentenliste mit ihren Argumentnamen,
Typen und IO-Richtung wird also mit Objekt-Attributen konnektiert.
Es sind in beliebig vielen Sprachen "Label" diesen Entitäten
zugeordnet. Die Implementierung der Abbildungen geschieht frei, d.h. es
existiert keine Festlegung für eine bestimmte Programmiersprache oder
Spezialhardware. Es gibt auch nicht implementierte Funktionen, das sind
entweder qualitative Operatoren, die der Annäherung an eine präzise
Formulierung dienen, oder Funktionsrümpfe, die noch ausgebaut werden
sollen.

Es können alternative Implementierungen existieren.

Wenn der Graph oder die Matrix definiert ist, kann es "Fragen
beantworten". Dafür stellt es zuvor ggfs. erst selbst Fragen, oder
stellt Fallunterscheidungen dar, und kann die Antwort erläutern.

Für Fragen kann es mehrere Lösungen anbieten und evt. "Kosten" jeder
Lösung bestimmen.

Ob eine Lösung existiert, hängt von der Bijektivität von Funktionen
ab.

Prozeß des Graph-Implementierens: Vor einer quantitativen Formulierung
von Objektbeziehungen besteht oft nur eine assoziative qualitative
Definition darüber, daß überhaupt eine Abhängigkeit existiert.
Hierfür werden genau solche leeren Funktionen verwendet. Vor einer
Auswertung muß dann auch wiedergegeben werden, daß undefinierte
Beziehungen existieren und daher das Ergebnis nicht vollständig bekannt
ist.

Alle Definitionen werden zusammen mit der Information des Autors
gespeichert. Ergebnisse können also einem Autor zugeordnet werden,
und Austausch über Erfahrungen oder Information Dritter ist möglich,
so daß im optimalen Falle eine Synthese oder Modell-Verfeinerung
ermöglicht wird.

Zu Beginn wird der Graph mit direktem Code gefüllt, aber frühzeitig
sollte das mit Meta-Funktionen erledigt werden.
Diese Meta-Funktionen werden für eine Vielzahl von Auswertungen
benötigt, z.B. dem Zuweisen zu einer Menge. Von diesen Zuweisungen
können andere Funktionen abhängig sein, oder wegen der Bildung von
Symmetrien auf der Basis von Mengen-Zuordnungen kann der Graph implizit
auf den Funktionszuordnungen von Mengen beruhen (Verallgemeinerung,
Abstrahierung, Metapher).

Tue, 09 Aug 2016 22:56:56 +0200
Nun sehe ich wieder mehr die mathematische Modellierung im Vordergrund,
bei welchen Ausdrücke durch sprachliche Funktionen substitutiert werden
können.

Ok, wenn ich ein Modell M habe, einen Datenkörper D aus der realen Welt.
Dann ist das Ziel, möglichst viele relevante Teile von D reproduzieren
zu können. 
Das lohnendste Objekt der Modellierung ist wahrscheinlich der Mensch mit
seinen Bedürfnissen.
Die hohe Schule der Modellierung wäre: "Wie entstehen Selbstlügen?" bzw.
soziale Prägung.

Sat, 01 Oct 2016 13:13:52 +0200
Die Funktionsdefinitionen bilden ein Gleichungssystem, das entweder mit
einem Interpreter ausgewertet, oder auf symbolischer Ebene mit einem CAS
wie Maxima oder Mathematica geprüft, vereinfacht, in
Bijektions-Richtungen ergänzt oder sonstwie modifiziert wird.

Propagation von Abbildungen: Es gibt einen global durchnumerierten
Iterationsschritt $step, für den alle direkten Abbildungen einer
Änderung ausgewertet und die betreffenden Objekt-Attribute aktualisiert
werden, wie in einem Petri-Netz.
Jedes Attribut enthält auch den $step-Wert seiner letzten Änderung, um
ungewünschte Rekursion einschränken zu können.

JavaScript als Client-Interpreter wäre sicherlich sehr wünschenswert.

Trigger-Mechanismen in Datenbanken wären in Kombination mit Stored
Procedures in SQL wahrscheinlich am zweckmäßigsten, um schnell ein
Petri-Netz zu implementieren.

Ein Antworts-Szenario könnte das Zurückverfolgen im Relationsgraphen
sein.

Wie implementiere ich Daten?
Gemäß dem Ansatz eines Graphen von Objekt-Nodes mit Attribut-Registern
wäre eine Datenmenge D ein Vektor von Attribut-Werten, aber wohl
meistens nicht in Abhängigkeit von $step, sondern von einer Realzeit t.
Ganz grob ließe sich das nach System-Messung auch ineinander überführen,
es bleibt dabei aber Undefiniertheit bzw. Informationsverlust, was aber
im Kontext mit den anderen Fehlern und Unsicherheiten keine große
Einschränkung bilden sollte.

Eine wahrscheinliche Falle ist Fehlmodellierung wegen Labeln,
Namensräumen oder Domains. Hierarchisierung sollte nur als eine
arbiträre Ordnungskonfiguration angesehen werden, die andere
Konfigurationen mit einschließt (Beispiel: Verzeichnishierarchie, aber
mit Symlinks ).

Edges des Graphen: Die Ausdrücke, mit denen die Attributwerte definiert
werden, enthalten andere Attributwerte.
Sobald ein Attributwert verwendet wird, und dieser auch beiträgt, bildet
er eine Kante im Relationsgraphen zwischen den beiden Attributen.
Ein Ausdrucksparser könnte also eine Adjazenzliste aufbauen.
